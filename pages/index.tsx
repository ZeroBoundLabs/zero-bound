import Head from 'next/head';
import { useState } from 'react';
import useScript from '../hooks/use-script';

const CLIENT_ID = process.env.NEXT_PUBLIC_CLIENT_ID;
const API_KEY = process.env.NEXT_PUBLIC_API_KEY;
const SCOPES = 'https://www.googleapis.com/auth/gmail.readonly';
const DISCOVERY_DOC = 'https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest';

let tokenClient: Record<string, any>;

export default function Home() {
  const [isGapiLoaded, setIsGapiLoaded] = useState(false);
  const [isGsiLoaded, setIsGsiLoaded] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  useScript('https://apis.google.com/js/api.js', () => {
    gapi.load('client', async () => {
      if (isGapiLoaded) {
        return;
      }
      await gapi.client
        .init({
          apiKey: API_KEY,
          discoveryDocs: [DISCOVERY_DOC]
        })
        .catch((err: any) => {
          console.error('Caught error', err);
        });

      setIsGapiLoaded(true);
    });
  });

  useScript('https://accounts.google.com/gsi/client', () => {
    if (isGsiLoaded) {
      return;
    }

    tokenClient = google.accounts.oauth2.initTokenClient({
      client_id: CLIENT_ID!,
      scope: SCOPES,
      callback: () => {}
    });

    setIsGsiLoaded(true);
  });

  const listLabels = async () => {
    try {
      const {
        result: { labels }
      } = await gapi.client.gmail.users.labels.list({
        userId: 'me'
      });
      console.log(labels?.reduce((str, label) => `${str}${label.name}\n`, 'Labels:\n'));
    } catch (err) {
      console.log(err);
    }
  };

  const onAuthorize = () => {
    tokenClient.callback = async (resp: any) => {
      if (resp.error !== undefined) {
        throw resp;
      }
      setIsLoggedIn(true);
      await listLabels();
    };

    if (gapi.client.getToken() === null) {
      tokenClient.requestAccessToken({ prompt: 'consent' });
    } else {
      tokenClient.requestAccessToken({ prompt: '' });
    }
  };

  const onSignout = () => {
    const token = gapi.client.getToken();
    if (token !== null) {
      google.accounts.oauth2.revoke(token.access_token, () => {
        gapi.client.setToken(null);
        setIsLoggedIn(false);
        // document.getElementById('authorize_button').innerText = 'Authorize';
      });
    }
  };

  if (!isGapiLoaded || !isGsiLoaded) {
    return <></>;
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <button onClick={onAuthorize}>{isLoggedIn ? 'Refresh' : 'Authorize'}</button>
      {isLoggedIn && <button onClick={onSignout}>Signout</button>}
    </>
  );
}
